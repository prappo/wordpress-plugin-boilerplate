---
description: WordPress Plugin Boilerplate
alwaysApply: true
---

# WordPress Plugin Boilerplate - Cursor Project Rules

## Project Overview
This is a WordPress Plugin Boilerplate project that follows modern development practices with:
- **Backend**: PHP with object-oriented architecture, namespaces, and WordPress standards
- **Frontend**: React with Vite, TypeScript, Tailwind CSS, and modern UI components
- **Build System**: Vite for frontend, Grunt for PHP tasks, npm for package management
- **Architecture**: MVC pattern with separation of concerns

## File Structure & Conventions

### Root Directory Structure
```
wordpress-plugin-boilerplate/
├── config/                 # PHP configuration files
├── database/              # Database migrations and seeders
│   ├── Migrations/        # Database schema changes
│   └── Seeders/           # Database seeding files
├── includes/             # Core PHP classes and functionality
│   ├── Admin/            # Admin-specific functionality
│   ├── Assets/           # Asset management classes
│   ├── Controllers/       # Business logic controllers
│   ├── Core/             # Core plugin functionality
│   ├── Frontend/         # Frontend-specific functionality
│   ├── Interfaces/       # PHP interfaces
│   ├── Models/           # Data models and ORM
│   ├── Routes/           # API route definitions
│   └── Traits/           # Reusable PHP traits
├── src/                  # Frontend source code
│   ├── admin/            # Admin React application
│   ├── frontend/         # Frontend React application
│   ├── components/       # Shared React components
│   ├── blocks/           # WordPress Gutenberg blocks
│   └── lib/              # Shared utilities
├── assets/               # Built assets (generated)
├── views/                # PHP templates
├── libs/                 # Third-party libraries
└── vendor/               # Composer dependencies
```

## PHP Development Rules

### Namespace Conventions
- **Main Namespace**: `WordPressPluginBoilerplate`
- **Sub-namespaces**: Follow directory structure (e.g., `WordPressPluginBoilerplate\Admin\Menu`)
- **Use PSR-4 autoloading** with Composer

### Class Structure
```php
<?php
namespace WordPressPluginBoilerplate\Admin;

use WordPressPluginBoilerplate\Traits\Base;

final class Menu {
    use Base;
    
    public function init() {
        // Implementation
    }
}
```

### File Naming
- **Classes**: PascalCase (e.g., `Menu.php`, `Actions.php`)
- **Functions**: snake_case (e.g., `wordpress_plugin_boilerplate_init`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `WORDPRESS_PLUGIN_BOILERPLATE_VERSION`)

### WordPress Standards
- Follow **WordPress Coding Standards**
- Use **WordPress hooks and filters** appropriately
- Implement **security best practices** (nonce verification, sanitization, escaping)
- Use **WordPress REST API** for AJAX requests

### Database & ORM
- Use **Eloquent ORM** for database operations
- Create **Migrations** for schema changes in `database/Migrations/`
- Create **Seeders** for test data in `database/Seeders/`
- Models should extend `Prappo\WpEloquent\Database\Eloquent\Model`

### API Routes
- Define routes in `includes/Routes/Api.php`
- Use RESTful conventions
- Implement proper authentication
- Follow WordPress REST API standards

## React/JavaScript Development Rules

### Component Structure
```jsx
// components/ui/Button.tsx
import React from 'react';
import { cn } from '@/lib/utils';

export const Button = ({ className, ...props }) => {
  return (
    <button
      className={cn(
        "inline-flex items-center justify-center rounded-md text-sm font-medium",
        className
      )}
      {...props}
    />
  );
};
```

### File Organization
- **Components**: PascalCase (e.g., `Button.tsx`, `UserProfile.jsx`)
- **Hooks**: camelCase with `use` prefix (e.g., `useMail.ts`)
- **Utilities**: camelCase (e.g., `utils.ts`)
- **Types**: PascalCase with `.ts` extension (e.g., `account-types.ts`)

### Styling Guidelines
- Use **Tailwind CSS** for styling
- Create **reusable component variants** with `class-variance-authority`
- Use **CSS modules** for component-specific styles
- Follow **mobile-first** responsive design

### State Management
- Use **React hooks** for local state
- Use **Jotai** for global state management
- Implement **React Query** for server state (when needed)

### WordPress Integration
- Use **@wordpress/scripts** for Gutenberg blocks
- Implement **WordPress REST API** integration
- Use **WordPress i18n** for internationalization

## Build & Development Rules

### Development Commands
```bash
# Start development servers
npm run dev                 # Both admin and frontend
npm run dev:admin          # Admin only
npm run dev:frontend       # Frontend only
npm run dev:server         # With WordPress server

# Build commands
npm run build              # Production build
npm run block:start        # Start block development
npm run block:build        # Build blocks
```

### Vite Configuration
- **Admin**: `vite.admin.config.js` - Admin React app
- **Frontend**: `vite.frontend.config.js` - Frontend React app
- Use **@kucrut/vite-for-wp** for WordPress integration

### Code Quality
- Use **ESLint** for JavaScript/TypeScript linting
- Use **Prettier** for code formatting
- Use **PHPCS** for PHP code standards
- Run `npm run format:check` and `npm run format:fix`

## Asset Management

### PHP Asset Loading
```php
// includes/Assets/Admin.php
class Admin {
    public function bootstrap() {
        wp_enqueue_script(
            'wordpress-plugin-boilerplate-admin',
            WORDPRESS_PLUGIN_BOILERPLATE_ASSETS_URL . '/admin/dist/main.js',
            array('wp-element', 'wp-components'),
            WORDPRESS_PLUGIN_BOILERPLATE_VERSION,
            true
        );
    }
}
```

### React Asset Integration
- Use **WordPress REST API** for data fetching
- Implement **nonce verification** for security
- Use **WordPress hooks** for data passing

## Database & Models

### Model Example
```php
// includes/Models/Posts.php
namespace WordPressPluginBoilerplate\Models;

use Prappo\WpEloquent\Database\Eloquent\Model;

class Posts extends Model {
    protected $table = 'posts';
    protected $fillable = ['post_title', 'post_content'];
}
```

### Migration Example
```php
// database/Migrations/CreatePostsTable.php
class CreatePostsTable {
    public function up() {
        // Schema creation
    }
    
    public function down() {
        // Schema rollback
    }
}
```

## API Development

### Route Definition
```php
// includes/Routes/Api.php
Route::get('/posts/get', '\WordPressPluginBoilerplate\Controllers\Posts\Actions@get_all_posts');
Route::post('/posts/create', '\WordPressPluginBoilerplate\Controllers\Posts\Actions@create_post');
```

### Controller Example
```php
// includes/Controllers/Posts/Actions.php
namespace WordPressPluginBoilerplate\Controllers\Posts;

class Actions {
    public function get_all_posts() {
        $posts = Posts::all();
        return wp_send_json_success($posts);
    }
}
```



### Code Review Checklist
- [ ] PHP follows WordPress coding standards
- [ ] React components are properly typed
- [ ] API endpoints have proper authentication
- [ ] Database queries are optimized
- [ ] Assets are properly enqueued
- [ ] Internationalization is implemented
- [ ] Security measures are in place

## Deployment & Release

### Release Process
```bash
npm run release  # Creates release package in /release folder
```

### Version Management
- Update version in `plugin-config.json`
- Update version in main plugin file
- Update version in `package.json`
- Create changelog entries

## Security Guidelines

### PHP Security
- Always use `defined('ABSPATH') || exit;`
- Sanitize all user inputs
- Use WordPress nonces for forms
- Escape all outputs
- Validate user capabilities

### JavaScript Security
- Validate data from WordPress REST API
- Use secure HTTP methods
- Implement proper error handling
- Sanitize user inputs on frontend

## Performance Optimization

### PHP Performance
- Use **object caching** where appropriate
- Optimize database queries
- Implement **lazy loading** for assets
- Use **transients** for expensive operations

### React Performance
- Use **React.memo** for expensive components
- Implement **code splitting** with dynamic imports
- Use **React.lazy** for route-based splitting
- Optimize bundle size with **tree shaking**

## Internationalization

### PHP i18n
```php
// Load text domain
load_plugin_textdomain('wordpress-plugin-boilerplate', false, dirname(plugin_basename(__FILE__)) . '/languages/');

// Use translation functions
__('Hello World', 'wordpress-plugin-boilerplate');
_e('Hello World', 'wordpress-plugin-boilerplate');
```

### React i18n
```jsx
// Use WordPress i18n
import { __ } from '@wordpress/i18n';

const MyComponent = () => {
  return <h1>{__('Hello World', 'wordpress-plugin-boilerplate')}</h1>;
};
```

## Common Patterns

### Plugin Initialization
```php
// Main plugin file
function wordpress_plugin_boilerplate_init() {
    WordPressPluginBoilerplate::get_instance()->init();
}
add_action('plugins_loaded', 'wordpress_plugin_boilerplate_init');
```

### React Component with WordPress Data
```jsx
// Access WordPress data
const MyComponent = () => {
  const wpData = window.wordpressPluginBoilerplateAdmin || {};
  
  return (
    <div>
      <h1>{wpData.pluginName}</h1>
    </div>
  );
};
```

### Shortcode Implementation
```php
// Register shortcode
Shortcode::add()
    ->tag('myshortcode')
    ->attrs(['id', 'name'])
    ->render(plugin_dir_path(__FILE__) . 'views/shortcode/myshortcode.php');
```

## Troubleshooting

### Common Issues
1. **Vite dev server not working**: Check SSL certificates or use localhost mode
2. **Assets not loading**: Verify asset paths and WordPress enqueue functions
3. **API routes not working**: Check route registration and authentication
4. **Build failures**: Ensure all dependencies are installed

### Debug Mode
- Enable WordPress debug mode
- Use browser developer tools for frontend debugging
- Check WordPress error logs
- Use React Developer Tools for component debugging

## Best Practices Summary

1. **Follow WordPress standards** for PHP development
2. **Use modern React patterns** with hooks and functional components
3. **Implement proper error handling** throughout the application
4. **Write clean, documented code** with proper comments
5. **Test thoroughly** before deployment
6. **Follow security best practices** for both PHP and JavaScript
7. **Optimize for performance** from the start
8. **Plan for internationalization** early in development
9. **Use version control** effectively with meaningful commits
10. **Document your code** and maintain up-to-date documentation

